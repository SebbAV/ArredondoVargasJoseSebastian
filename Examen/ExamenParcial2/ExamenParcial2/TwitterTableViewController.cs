// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Foundation;
using LinqToTwitter;
using System.Linq;
using UIKit;
using System.Diagnostics.Contracts;

namespace ExamenParcial2
{
    public partial class TwitterTableViewController : UITableViewController, IUITableViewDelegate, IUITableViewDataSource,IUISearchResultsUpdating
    {
        #region Global variables
        UIRefreshControl refreshControl;
        List<Tweet> LstTweets;
      
        #endregion


        public TwitterTableViewController(IntPtr handle) : base(handle)
        {
        }

        #region Tweet Loading
        /// <summary>
        /// Handles the execution of the tweet when the view is loaded
        /// </summary>
        async void GetTweets()
        {
            
            await InitTweetsAsync("Twitter");



        }
        /// <summary>
        /// Loads the tweets asynchrounously using the a fixed query.
        /// Loading them into a global list and reloads the table at the end.
        /// </summary>
        /// <returns>no returns</returns>
        public async Task InitTweetsAsync(string filter)
        {
            try
            {
                LstTweets = new List<Tweet>();
                if (filter.Length == 0 || filter == null || String.IsNullOrWhiteSpace(filter))
                {
                    filter = "Twitter";
                }
                    Search searchResponse = await
                        (from search in ctx.Search
                         where search.Type == SearchType.Search &&
                               search.Query == filter
                         select search)
                        .SingleAsync();

                    LstTweets =
                        (from tweet in searchResponse.Statuses
                         select new Tweet
                         {
                             StatusID = tweet.StatusID,
                             ScreenName = tweet.User.ScreenNameResponse,
                             Text = tweet.Text,
                             ImageUrl = tweet.User.ProfileImageUrl
                         })
                        .ToList();

                InvokeOnMainThread(() =>
                {
                    refreshControl.EndRefreshing();
                    TableView.ReloadData();
                });
            }
            catch(Exception ex){
                Console.Write("Task was canceled" + ex);
            }


        }
        #endregion

        #region Post Tweets
        public async Task<Status> PostTweetAsync(UIAlertController alert)
        {
            try
            {
                var auth = new SingleUserAuthorizer
                {
                    CredentialStore = new SingleUserInMemoryCredentialStore
                    {

                        ConsumerKey = TwitterAPICredentials.ConsumerApiKey,
                        ConsumerSecret = TwitterAPICredentials.ConsumerApiSecret,
                        AccessToken = TwitterAPICredentials.AccessToken,
                        AccessTokenSecret = TwitterAPICredentials.AccessTokenSecret,

                    }

                };
                var ctx = new TwitterContext(auth);
                string t = alert.TextFields[0].Text;
                var status = new Status();
                if (t != null && t != "")
                    status = await ctx.TweetAsync(t);

                return status;
            }
            catch (Exception ex)
            {
                Console.Write("Task was canceled" + ex);
                return null;
            }

        }
        #endregion
        #region Table Handler
        public override nint NumberOfSections(UITableView tableView) => 1;
        public override nint RowsInSection(UITableView tableView, nint section) => LstTweets.Count;
		public override string TitleForHeader(UITableView tableView, nint section)
		{
            return header;
		}
		static UIImage FromUrl(string uri)
        {
            using (var url = new NSUrl(uri))
            using (var data = NSData.FromUrl(url))
                return UIImage.LoadFromData(data);
        }
        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell(TwitterCustomCell.Key, indexPath) as TwitterCustomCell;
            cell.UserName = $"{LstTweets[indexPath.Row].ScreenName}";
            cell.TweetText = $"{LstTweets[indexPath.Row].Text}";


            if (LstTweets[indexPath.Row].ImageUrl != null)
                cell.ProfileImage = FromUrl(LstTweets[indexPath.Row].ImageUrl);

            return cell;
        }
        #endregion



        #region User Interactions
        async partial void btnTweet(NSObject sender)
        {

            var alert = UIAlertController.Create("Post a Tweet", null, UIAlertControllerStyle.Alert);
            alert.AddTextField((obj) => { });
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, async (obj) =>  await PostTweetAsync(alert)));
            alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Default, null));

            PresentViewController(alert, true, null);

        }
		async partial void btnSearch_TouchUpInside(NSObject sender)
		{
            var alert = UIAlertController.Create("Change the tweets filter", null, UIAlertControllerStyle.Alert);
            alert.AddTextField((obj) => { });
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, async (obj) => await InitTweetsAsync(alert.TextFields[0].Text)));
            alert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Default, null));

            PresentViewController(alert, true, null);
		}
		#endregion

	}
}
